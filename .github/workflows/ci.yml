name: CI

on:
  push:
    tags:
      - "v*"
    branches-ignore:
      - gh-pages
  pull_request:
    branches-ignore:
      - gh-pages

jobs:
  build_nonpackaged:
    strategy:
      matrix:
        configuration: [Debug, Release]
        platform: [x64]
    runs-on: windows-latest

    env:
      ZIP_FILE: MicaForEveryone-${{ matrix.platform }}-${{ matrix.configuration }}.zip
      INSTALLER_FILE_BASE_NAME: MicaForEveryone-${{ matrix.platform }}-${{ matrix.configuration }}-Installer
      RELEASE_DIR: Release

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get Version
        id: get_version
        uses: MicaForEveryone/get-version-action@v2.3.1
        if: startsWith(github.ref, 'refs/tags/v')
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.3

      # Zip
      - name: Build the application
        run: msbuild MicaForEveryone\MicaForEveryone.csproj /restore /p:BuildingInCI=true /p:Configuration=${{ matrix.configuration }} /p:Platform=${{ matrix.platform }} /p:ReleaseDirectory=..\${{ env.RELEASE_DIR }} /p:ZipName=${{ env.ZIP_FILE }} /t:ReleaseZip
      - name: Upload ZIP artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ZIP_FILE }}
          path: ${{ env.RELEASE_DIR }}\${{ env.ZIP_FILE }}
          if-no-files-found: error

      # Installer
      - name: Build Installer
        run: iscc Installer.iss /O${{ env.RELEASE_DIR }}
        env:
          Source: MicaForEveryone\bin\${{ matrix.platform }}\${{ matrix.configuration }}\netcoreapp3.1
          VERSION: ${{ startsWith(github.ref, 'refs/tags/v') && steps.get_version.outputs.version-without-v || '0.0.0.0'  }} # Use version tag if available, else use 0.0.0.0
      - name: Upload installer artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.INSTALLER_FILE_BASE_NAME }}
          path: ${{ env.RELEASE_DIR }}\${{ env.INSTALLER_FILE_BASE_NAME }}.exe
          if-no-files-found: error

  build_packaged:
    strategy:
      matrix:
        configuration: [Debug, Release]
        platform: [x64]
    runs-on: windows-latest

    env:
      MSIX_FILE: MicaForEveryone-${{ matrix.platform }}-${{ matrix.configuration }}.msix
      RELEASE_DIR: Release

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get Version
        id: get_version
        uses: MicaForEveryone/get-version-action@v2.3.1
        if: startsWith(github.ref, 'refs/tags/v')
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.3

      - name: Package MSIX
        run: msbuild MicaForEveryone.Package\MicaForEveryone.Package.wapproj /restore /p:BuildingInCI=true /p:Configuration=${{ matrix.configuration }} /p:AppxBundle=Never /p:Platform=${{ matrix.platform }} /p:ErrorOnDuplicatePublishOutputFiles=false /p:ReleaseDirectory=..\${{ env.RELEASE_DIR }} /p:MsixName=${{ env.MSIX_FILE }} /t:ReleaseMsix
      - name: Sign Package
        env:
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        if: "${{ env.KEY_PASSWORD != '' }}"
        run: '& "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22000.0\x64\signtool.exe" sign /fd SHA256 /a /f MicaForEveryone.pfx /p "${{ secrets.KEY_PASSWORD }}" ${{ env.RELEASE_DIR }}\${{ env.MSIX_FILE }}'
      - name: Upload MSIX
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.MSIX_FILE }}
          path: ${{ env.RELEASE_DIR }}\${{ env.MSIX_FILE }}
          if-no-files-found: error

  release:
    needs: [build_nonpackaged, build_packaged]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - uses: actions/download-artifact@v3
        with:
          path: artifacts
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          files: artifacts/**/*

  winget:
    needs: [release]
    runs-on: ubuntu-latest
    steps:
      - uses: vedantmgoyal2009/winget-releaser@v2
        with:
          identifier: MicaForEveryone.MicaForEveryone
          installers-regex: 'MicaForEveryone-\w+-Release-Installer\.exe$'
          token: ${{ secrets.WINGET_TOKEN }}
